/// Generated by the Protocol Buffers 3.7.0 compiler.  DO NOT EDIT!
/// Protobuf-swift version: 4.0.0
/// Source file "IMMessage.proto"
/// Syntax "Proto2"

import Foundation
import ProtocolBuffers


public struct ImmessageRoot {
    public static let `default` = ImmessageRoot()
    public var extensionRegistry:ExtensionRegistry

    init() {
        extensionRegistry = ExtensionRegistry()
        registerAllExtensions(registry: extensionRegistry)
    }
    public func registerAllExtensions(registry: ExtensionRegistry) {
    }
}

final public class UserInfo : GeneratedMessage {
    public typealias BuilderType = UserInfo.Builder

    public static func == (lhs: UserInfo, rhs: UserInfo) -> Bool {
        if lhs === rhs {
            return true
        }
        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
        fieldCheck = fieldCheck && (lhs.hasName == rhs.hasName) && (!lhs.hasName || lhs.name == rhs.name)
        fieldCheck = fieldCheck && (lhs.hasLevel == rhs.hasLevel) && (!lhs.hasLevel || lhs.level == rhs.level)
        fieldCheck = fieldCheck && (lhs.hasIconUrl == rhs.hasIconUrl) && (!lhs.hasIconUrl || lhs.iconUrl == rhs.iconUrl)
        fieldCheck = fieldCheck && (lhs.hasUserId == rhs.hasUserId) && (!lhs.hasUserId || lhs.userId == rhs.userId)
        fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
        return fieldCheck
    }

    public fileprivate(set) var name:String! = nil
    public fileprivate(set) var hasName:Bool = false

    public fileprivate(set) var level:Int64! = nil
    public fileprivate(set) var hasLevel:Bool = false

    public fileprivate(set) var iconUrl:String! = nil
    public fileprivate(set) var hasIconUrl:Bool = false

    public fileprivate(set) var userId:String! = nil
    public fileprivate(set) var hasUserId:Bool = false

    required public init() {
        super.init()
    }
    override public func isInitialized() throws {
        if !hasName {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message \(UserInfo.self): field \"name\" mark required")
        }
        if !hasLevel {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message \(UserInfo.self): field \"level\" mark required")
        }
        if !hasIconUrl {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message \(UserInfo.self): field \"iconUrl\" mark required")
        }
        if !hasUserId {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message \(UserInfo.self): field \"userId\" mark required")
        }
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
        if hasName {
            try codedOutputStream.writeString(fieldNumber: 1, value:name)
        }
        if hasLevel {
            try codedOutputStream.writeInt64(fieldNumber: 2, value:level)
        }
        if hasIconUrl {
            try codedOutputStream.writeString(fieldNumber: 3, value:iconUrl)
        }
        if hasUserId {
            try codedOutputStream.writeString(fieldNumber: 4, value:userId)
        }
        try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
        var serialize_size:Int32 = memoizedSerializedSize
        if serialize_size != -1 {
         return serialize_size
        }

        serialize_size = 0
        if hasName {
            serialize_size += name.computeStringSize(fieldNumber: 1)
        }
        if hasLevel {
            serialize_size += level.computeInt64Size(fieldNumber: 2)
        }
        if hasIconUrl {
            serialize_size += iconUrl.computeStringSize(fieldNumber: 3)
        }
        if hasUserId {
            serialize_size += userId.computeStringSize(fieldNumber: 4)
        }
        serialize_size += unknownFields.serializedSize()
        memoizedSerializedSize = serialize_size
        return serialize_size
    }
    public class func getBuilder() -> UserInfo.Builder {
        return UserInfo.classBuilder() as! UserInfo.Builder
    }
    public func getBuilder() -> UserInfo.Builder {
        return classBuilder() as! UserInfo.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
        return UserInfo.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
        return UserInfo.Builder()
    }
    public func toBuilder() throws -> UserInfo.Builder {
        return try UserInfo.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:UserInfo) throws -> UserInfo.Builder {
        return try UserInfo.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
        try isInitialized()
        var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
        if hasName {
            jsonMap["name"] = name
        }
        if hasLevel {
            jsonMap["level"] = "\(level!)"
        }
        if hasIconUrl {
            jsonMap["iconUrl"] = iconUrl
        }
        if hasUserId {
            jsonMap["userId"] = userId
        }
        return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> UserInfo {
        return try UserInfo.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data, options: JSONSerialization.ReadingOptions = []) throws -> UserInfo {
        return try UserInfo.Builder.fromJSONToBuilder(data:data, options:options).build()
    }
    override public func getDescription(indent:String) throws -> String {
        var output = ""
        if hasName {
            output += "\(indent) name: \(String(describing: name)) \n"
        }
        if hasLevel {
            output += "\(indent) level: \(String(describing: level)) \n"
        }
        if hasIconUrl {
            output += "\(indent) iconUrl: \(String(describing: iconUrl)) \n"
        }
        if hasUserId {
            output += "\(indent) userId: \(String(describing: userId)) \n"
        }
        output += unknownFields.getDescription(indent: indent)
        return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasName {
                hashCode = (hashCode &* 31) &+ name.hashValue
            }
            if hasLevel {
                hashCode = (hashCode &* 31) &+ level.hashValue
            }
            if hasIconUrl {
                hashCode = (hashCode &* 31) &+ iconUrl.hashValue
            }
            if hasUserId {
                hashCode = (hashCode &* 31) &+ userId.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "UserInfo"
    }
    override public func className() -> String {
        return "UserInfo"
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
        fileprivate var builderResult:UserInfo = UserInfo()
        public func getMessage() -> UserInfo {
            return builderResult
        }

        required override public init () {
            super.init()
        }
        public var name:String {
            get {
                return builderResult.name
            }
            set (value) {
                builderResult.hasName = true
                builderResult.name = value
            }
        }
        public var hasName:Bool {
            get {
                return builderResult.hasName
            }
        }
        @discardableResult
        public func setName(_ value:String) -> UserInfo.Builder {
            self.name = value
            return self
        }
        @discardableResult
        public func clearName() -> UserInfo.Builder{
            builderResult.hasName = false
            builderResult.name = nil
            return self
        }
        public var level:Int64 {
            get {
                return builderResult.level
            }
            set (value) {
                builderResult.hasLevel = true
                builderResult.level = value
            }
        }
        public var hasLevel:Bool {
            get {
                return builderResult.hasLevel
            }
        }
        @discardableResult
        public func setLevel(_ value:Int64) -> UserInfo.Builder {
            self.level = value
            return self
        }
        @discardableResult
        public func clearLevel() -> UserInfo.Builder{
            builderResult.hasLevel = false
            builderResult.level = nil
            return self
        }
        public var iconUrl:String {
            get {
                return builderResult.iconUrl
            }
            set (value) {
                builderResult.hasIconUrl = true
                builderResult.iconUrl = value
            }
        }
        public var hasIconUrl:Bool {
            get {
                return builderResult.hasIconUrl
            }
        }
        @discardableResult
        public func setIconUrl(_ value:String) -> UserInfo.Builder {
            self.iconUrl = value
            return self
        }
        @discardableResult
        public func clearIconUrl() -> UserInfo.Builder{
            builderResult.hasIconUrl = false
            builderResult.iconUrl = nil
            return self
        }
        public var userId:String {
            get {
                return builderResult.userId
            }
            set (value) {
                builderResult.hasUserId = true
                builderResult.userId = value
            }
        }
        public var hasUserId:Bool {
            get {
                return builderResult.hasUserId
            }
        }
        @discardableResult
        public func setUserId(_ value:String) -> UserInfo.Builder {
            self.userId = value
            return self
        }
        @discardableResult
        public func clearUserId() -> UserInfo.Builder{
            builderResult.hasUserId = false
            builderResult.userId = nil
            return self
        }
        override public var internalGetResult:GeneratedMessage {
            get {
                return builderResult
            }
        }
        @discardableResult
        override public func clear() -> UserInfo.Builder {
            builderResult = UserInfo()
            return self
        }
        override public func clone() throws -> UserInfo.Builder {
            return try UserInfo.builderWithPrototype(prototype:builderResult)
        }
        override public func build() throws -> UserInfo {
            try checkInitialized()
            return buildPartial()
        }
        public func buildPartial() -> UserInfo {
            let returnMe:UserInfo = builderResult
            return returnMe
        }
        @discardableResult
        public func mergeFrom(other:UserInfo) throws -> UserInfo.Builder {
            if other == UserInfo() {
                return self
            }
            if other.hasName {
                name = other.name
            }
            if other.hasLevel {
                level = other.level
            }
            if other.hasIconUrl {
                iconUrl = other.iconUrl
            }
            if other.hasUserId {
                userId = other.userId
            }
            try merge(unknownField: other.unknownFields)
            return self
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream) throws -> UserInfo.Builder {
            return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> UserInfo.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
            while (true) {
                let protobufTag = try codedInputStream.readTag()
                switch protobufTag {
                case 0: 
                    self.unknownFields = try unknownFieldsBuilder.build()
                    return self

                case 10:
                    name = try codedInputStream.readString()

                case 16:
                    level = try codedInputStream.readInt64()

                case 26:
                    iconUrl = try codedInputStream.readString()

                case 34:
                    userId = try codedInputStream.readString()

                default:
                    if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                        unknownFields = try unknownFieldsBuilder.build()
                        return self
                    }
                }
            }
        }
        class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> UserInfo.Builder {
            let resultDecodedBuilder = UserInfo.Builder()
            if let jsonValueName = jsonMap["name"] as? String {
                resultDecodedBuilder.name = jsonValueName
            }
            if let jsonValueLevel = jsonMap["level"] as? String {
                resultDecodedBuilder.level = Int64(jsonValueLevel)!
            } else if let jsonValueLevel = jsonMap["level"] as? Int {
                resultDecodedBuilder.level = Int64(jsonValueLevel)
            }
            if let jsonValueIconUrl = jsonMap["iconUrl"] as? String {
                resultDecodedBuilder.iconUrl = jsonValueIconUrl
            }
            if let jsonValueUserId = jsonMap["userId"] as? String {
                resultDecodedBuilder.userId = jsonValueUserId
            }
            return resultDecodedBuilder
        }
        override class public func fromJSONToBuilder(data:Data, options: JSONSerialization.ReadingOptions = []) throws -> UserInfo.Builder {
            let jsonData = try JSONSerialization.jsonObject(with:data, options: options)
            guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
              throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
            }
            return try UserInfo.Builder.decodeToBuilder(jsonMap:jsDataCast)
        }
    }

}

final public class TextMessage : GeneratedMessage {
    public typealias BuilderType = TextMessage.Builder

    public static func == (lhs: TextMessage, rhs: TextMessage) -> Bool {
        if lhs === rhs {
            return true
        }
        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
        fieldCheck = fieldCheck && (lhs.hasUser == rhs.hasUser) && (!lhs.hasUser || lhs.user == rhs.user)
        fieldCheck = fieldCheck && (lhs.hasText == rhs.hasText) && (!lhs.hasText || lhs.text == rhs.text)
        fieldCheck = fieldCheck && (lhs.hasChatId == rhs.hasChatId) && (!lhs.hasChatId || lhs.chatId == rhs.chatId)
        fieldCheck = fieldCheck && (lhs.hasToUserId == rhs.hasToUserId) && (!lhs.hasToUserId || lhs.toUserId == rhs.toUserId)
        fieldCheck = fieldCheck && (lhs.hasChatType == rhs.hasChatType) && (!lhs.hasChatType || lhs.chatType == rhs.chatType)
        fieldCheck = fieldCheck && (lhs.hasSuccess == rhs.hasSuccess) && (!lhs.hasSuccess || lhs.success == rhs.success)
        fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
        return fieldCheck
    }

    public fileprivate(set) var user:UserInfo!
    public fileprivate(set) var hasUser:Bool = false
    public fileprivate(set) var text:String! = nil
    public fileprivate(set) var hasText:Bool = false

    public fileprivate(set) var chatId:String! = nil
    public fileprivate(set) var hasChatId:Bool = false

    public fileprivate(set) var toUserId:String! = nil
    public fileprivate(set) var hasToUserId:Bool = false

    public fileprivate(set) var chatType:String! = nil
    public fileprivate(set) var hasChatType:Bool = false

    public fileprivate(set) var success:String! = nil
    public fileprivate(set) var hasSuccess:Bool = false

    required public init() {
        super.init()
    }
    override public func isInitialized() throws {
        if !hasUser {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message \(TextMessage.self): field \"user\" mark required")
        }
        if !hasText {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message \(TextMessage.self): field \"text\" mark required")
        }
        if !hasChatId {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message \(TextMessage.self): field \"chatId\" mark required")
        }
        if !hasChatType {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message \(TextMessage.self): field \"chatType\" mark required")
        }
        try user.isInitialized()
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
        if hasUser {
            try codedOutputStream.writeMessage(fieldNumber: 1, value:user)
        }
        if hasText {
            try codedOutputStream.writeString(fieldNumber: 2, value:text)
        }
        if hasChatId {
            try codedOutputStream.writeString(fieldNumber: 3, value:chatId)
        }
        if hasToUserId {
            try codedOutputStream.writeString(fieldNumber: 4, value:toUserId)
        }
        if hasChatType {
            try codedOutputStream.writeString(fieldNumber: 5, value:chatType)
        }
        if hasSuccess {
            try codedOutputStream.writeString(fieldNumber: 6, value:success)
        }
        try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
        var serialize_size:Int32 = memoizedSerializedSize
        if serialize_size != -1 {
         return serialize_size
        }

        serialize_size = 0
        if hasUser {
            if let varSizeuser = user?.computeMessageSize(fieldNumber: 1) {
                serialize_size += varSizeuser
            }
        }
        if hasText {
            serialize_size += text.computeStringSize(fieldNumber: 2)
        }
        if hasChatId {
            serialize_size += chatId.computeStringSize(fieldNumber: 3)
        }
        if hasToUserId {
            serialize_size += toUserId.computeStringSize(fieldNumber: 4)
        }
        if hasChatType {
            serialize_size += chatType.computeStringSize(fieldNumber: 5)
        }
        if hasSuccess {
            serialize_size += success.computeStringSize(fieldNumber: 6)
        }
        serialize_size += unknownFields.serializedSize()
        memoizedSerializedSize = serialize_size
        return serialize_size
    }
    public class func getBuilder() -> TextMessage.Builder {
        return TextMessage.classBuilder() as! TextMessage.Builder
    }
    public func getBuilder() -> TextMessage.Builder {
        return classBuilder() as! TextMessage.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
        return TextMessage.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
        return TextMessage.Builder()
    }
    public func toBuilder() throws -> TextMessage.Builder {
        return try TextMessage.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:TextMessage) throws -> TextMessage.Builder {
        return try TextMessage.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
        try isInitialized()
        var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
        if hasUser {
            jsonMap["user"] = try user.encode()
        }
        if hasText {
            jsonMap["text"] = text
        }
        if hasChatId {
            jsonMap["chatId"] = chatId
        }
        if hasToUserId {
            jsonMap["toUserId"] = toUserId
        }
        if hasChatType {
            jsonMap["chatType"] = chatType
        }
        if hasSuccess {
            jsonMap["success"] = success
        }
        return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> TextMessage {
        return try TextMessage.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data, options: JSONSerialization.ReadingOptions = []) throws -> TextMessage {
        return try TextMessage.Builder.fromJSONToBuilder(data:data, options:options).build()
    }
    override public func getDescription(indent:String) throws -> String {
        var output = ""
        if hasUser {
            output += "\(indent) user {\n"
            if let outDescUser = user {
                output += try outDescUser.getDescription(indent: "\(indent)  ")
            }
            output += "\(indent) }\n"
        }
        if hasText {
            output += "\(indent) text: \(String(describing: text)) \n"
        }
        if hasChatId {
            output += "\(indent) chatId: \(String(describing: chatId)) \n"
        }
        if hasToUserId {
            output += "\(indent) toUserId: \(String(describing: toUserId)) \n"
        }
        if hasChatType {
            output += "\(indent) chatType: \(String(describing: chatType)) \n"
        }
        if hasSuccess {
            output += "\(indent) success: \(String(describing: success)) \n"
        }
        output += unknownFields.getDescription(indent: indent)
        return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasUser {
                if let hashValueuser = user?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueuser
                }
            }
            if hasText {
                hashCode = (hashCode &* 31) &+ text.hashValue
            }
            if hasChatId {
                hashCode = (hashCode &* 31) &+ chatId.hashValue
            }
            if hasToUserId {
                hashCode = (hashCode &* 31) &+ toUserId.hashValue
            }
            if hasChatType {
                hashCode = (hashCode &* 31) &+ chatType.hashValue
            }
            if hasSuccess {
                hashCode = (hashCode &* 31) &+ success.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "TextMessage"
    }
    override public func className() -> String {
        return "TextMessage"
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
        fileprivate var builderResult:TextMessage = TextMessage()
        public func getMessage() -> TextMessage {
            return builderResult
        }

        required override public init () {
            super.init()
        }
        public var user:UserInfo! {
            get {
                if userBuilder_ != nil {
                    builderResult.user = userBuilder_.getMessage()
                }
                return builderResult.user
            }
            set (value) {
                builderResult.hasUser = value != nil
                builderResult.user = value
            }
        }
        public var hasUser:Bool {
            get {
                return builderResult.hasUser
            }
        }
        fileprivate var userBuilder_:UserInfo.Builder! {
            didSet {
                builderResult.hasUser = true
            }
        }
        public func getUserBuilder() -> UserInfo.Builder {
            if userBuilder_ == nil {
                userBuilder_ = UserInfo.Builder()
                builderResult.user = userBuilder_.getMessage()
                if user != nil {
                    try! userBuilder_.mergeFrom(other: user)
                }
            }
            return userBuilder_
        }
        @discardableResult
        public func setUser(_ value:UserInfo!) -> TextMessage.Builder {
            self.user = value
            return self
        }
        @discardableResult
        public func mergeUser(value:UserInfo) throws -> TextMessage.Builder {
            if builderResult.hasUser {
                builderResult.user = try UserInfo.builderWithPrototype(prototype:builderResult.user).mergeFrom(other: value).buildPartial()
            } else {
                builderResult.user = value
            }
            builderResult.hasUser = true
            return self
        }
        @discardableResult
        public func clearUser() -> TextMessage.Builder {
            userBuilder_ = nil
            builderResult.hasUser = false
            builderResult.user = nil
            return self
        }
        public var text:String {
            get {
                return builderResult.text
            }
            set (value) {
                builderResult.hasText = true
                builderResult.text = value
            }
        }
        public var hasText:Bool {
            get {
                return builderResult.hasText
            }
        }
        @discardableResult
        public func setText(_ value:String) -> TextMessage.Builder {
            self.text = value
            return self
        }
        @discardableResult
        public func clearText() -> TextMessage.Builder{
            builderResult.hasText = false
            builderResult.text = nil
            return self
        }
        public var chatId:String {
            get {
                return builderResult.chatId
            }
            set (value) {
                builderResult.hasChatId = true
                builderResult.chatId = value
            }
        }
        public var hasChatId:Bool {
            get {
                return builderResult.hasChatId
            }
        }
        @discardableResult
        public func setChatId(_ value:String) -> TextMessage.Builder {
            self.chatId = value
            return self
        }
        @discardableResult
        public func clearChatId() -> TextMessage.Builder{
            builderResult.hasChatId = false
            builderResult.chatId = nil
            return self
        }
        public var toUserId:String {
            get {
                return builderResult.toUserId
            }
            set (value) {
                builderResult.hasToUserId = true
                builderResult.toUserId = value
            }
        }
        public var hasToUserId:Bool {
            get {
                return builderResult.hasToUserId
            }
        }
        @discardableResult
        public func setToUserId(_ value:String) -> TextMessage.Builder {
            self.toUserId = value
            return self
        }
        @discardableResult
        public func clearToUserId() -> TextMessage.Builder{
            builderResult.hasToUserId = false
            builderResult.toUserId = nil
            return self
        }
        public var chatType:String {
            get {
                return builderResult.chatType
            }
            set (value) {
                builderResult.hasChatType = true
                builderResult.chatType = value
            }
        }
        public var hasChatType:Bool {
            get {
                return builderResult.hasChatType
            }
        }
        @discardableResult
        public func setChatType(_ value:String) -> TextMessage.Builder {
            self.chatType = value
            return self
        }
        @discardableResult
        public func clearChatType() -> TextMessage.Builder{
            builderResult.hasChatType = false
            builderResult.chatType = nil
            return self
        }
        public var success:String {
            get {
                return builderResult.success
            }
            set (value) {
                builderResult.hasSuccess = true
                builderResult.success = value
            }
        }
        public var hasSuccess:Bool {
            get {
                return builderResult.hasSuccess
            }
        }
        @discardableResult
        public func setSuccess(_ value:String) -> TextMessage.Builder {
            self.success = value
            return self
        }
        @discardableResult
        public func clearSuccess() -> TextMessage.Builder{
            builderResult.hasSuccess = false
            builderResult.success = nil
            return self
        }
        override public var internalGetResult:GeneratedMessage {
            get {
                return builderResult
            }
        }
        @discardableResult
        override public func clear() -> TextMessage.Builder {
            builderResult = TextMessage()
            return self
        }
        override public func clone() throws -> TextMessage.Builder {
            return try TextMessage.builderWithPrototype(prototype:builderResult)
        }
        override public func build() throws -> TextMessage {
            try checkInitialized()
            return buildPartial()
        }
        public func buildPartial() -> TextMessage {
            let returnMe:TextMessage = builderResult
            return returnMe
        }
        @discardableResult
        public func mergeFrom(other:TextMessage) throws -> TextMessage.Builder {
            if other == TextMessage() {
                return self
            }
            if (other.hasUser) {
                try mergeUser(value: other.user)
            }
            if other.hasText {
                text = other.text
            }
            if other.hasChatId {
                chatId = other.chatId
            }
            if other.hasToUserId {
                toUserId = other.toUserId
            }
            if other.hasChatType {
                chatType = other.chatType
            }
            if other.hasSuccess {
                success = other.success
            }
            try merge(unknownField: other.unknownFields)
            return self
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream) throws -> TextMessage.Builder {
            return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> TextMessage.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
            while (true) {
                let protobufTag = try codedInputStream.readTag()
                switch protobufTag {
                case 0: 
                    self.unknownFields = try unknownFieldsBuilder.build()
                    return self

                case 10:
                    let subBuilder:UserInfo.Builder = UserInfo.Builder()
                    if hasUser {
                        try subBuilder.mergeFrom(other: user)
                    }
                    try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                    user = subBuilder.buildPartial()

                case 18:
                    text = try codedInputStream.readString()

                case 26:
                    chatId = try codedInputStream.readString()

                case 34:
                    toUserId = try codedInputStream.readString()

                case 42:
                    chatType = try codedInputStream.readString()

                case 50:
                    success = try codedInputStream.readString()

                default:
                    if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                        unknownFields = try unknownFieldsBuilder.build()
                        return self
                    }
                }
            }
        }
        class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> TextMessage.Builder {
            let resultDecodedBuilder = TextMessage.Builder()
            if let jsonValueUser = jsonMap["user"] as? Dictionary<String,Any> {
                resultDecodedBuilder.user = try UserInfo.Builder.decodeToBuilder(jsonMap:jsonValueUser).build()

            }
            if let jsonValueText = jsonMap["text"] as? String {
                resultDecodedBuilder.text = jsonValueText
            }
            if let jsonValueChatId = jsonMap["chatId"] as? String {
                resultDecodedBuilder.chatId = jsonValueChatId
            }
            if let jsonValueToUserId = jsonMap["toUserId"] as? String {
                resultDecodedBuilder.toUserId = jsonValueToUserId
            }
            if let jsonValueChatType = jsonMap["chatType"] as? String {
                resultDecodedBuilder.chatType = jsonValueChatType
            }
            if let jsonValueSuccess = jsonMap["success"] as? String {
                resultDecodedBuilder.success = jsonValueSuccess
            }
            return resultDecodedBuilder
        }
        override class public func fromJSONToBuilder(data:Data, options: JSONSerialization.ReadingOptions = []) throws -> TextMessage.Builder {
            let jsonData = try JSONSerialization.jsonObject(with:data, options: options)
            guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
              throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
            }
            return try TextMessage.Builder.decodeToBuilder(jsonMap:jsDataCast)
        }
    }

}

final public class GroupMessage : GeneratedMessage {
    public typealias BuilderType = GroupMessage.Builder

    public static func == (lhs: GroupMessage, rhs: GroupMessage) -> Bool {
        if lhs === rhs {
            return true
        }
        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
        fieldCheck = fieldCheck && (lhs.hasUser == rhs.hasUser) && (!lhs.hasUser || lhs.user == rhs.user)
        fieldCheck = fieldCheck && (lhs.hasText == rhs.hasText) && (!lhs.hasText || lhs.text == rhs.text)
        fieldCheck = fieldCheck && (lhs.hasGroupId == rhs.hasGroupId) && (!lhs.hasGroupId || lhs.groupId == rhs.groupId)
        fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
        return fieldCheck
    }

    public fileprivate(set) var user:UserInfo!
    public fileprivate(set) var hasUser:Bool = false
    public fileprivate(set) var text:String! = nil
    public fileprivate(set) var hasText:Bool = false

    public fileprivate(set) var groupId:Int64! = nil
    public fileprivate(set) var hasGroupId:Bool = false

    required public init() {
        super.init()
    }
    override public func isInitialized() throws {
        if !hasUser {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message \(GroupMessage.self): field \"user\" mark required")
        }
        if !hasText {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message \(GroupMessage.self): field \"text\" mark required")
        }
        if !hasGroupId {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message \(GroupMessage.self): field \"groupId\" mark required")
        }
        try user.isInitialized()
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
        if hasUser {
            try codedOutputStream.writeMessage(fieldNumber: 1, value:user)
        }
        if hasText {
            try codedOutputStream.writeString(fieldNumber: 2, value:text)
        }
        if hasGroupId {
            try codedOutputStream.writeInt64(fieldNumber: 3, value:groupId)
        }
        try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
        var serialize_size:Int32 = memoizedSerializedSize
        if serialize_size != -1 {
         return serialize_size
        }

        serialize_size = 0
        if hasUser {
            if let varSizeuser = user?.computeMessageSize(fieldNumber: 1) {
                serialize_size += varSizeuser
            }
        }
        if hasText {
            serialize_size += text.computeStringSize(fieldNumber: 2)
        }
        if hasGroupId {
            serialize_size += groupId.computeInt64Size(fieldNumber: 3)
        }
        serialize_size += unknownFields.serializedSize()
        memoizedSerializedSize = serialize_size
        return serialize_size
    }
    public class func getBuilder() -> GroupMessage.Builder {
        return GroupMessage.classBuilder() as! GroupMessage.Builder
    }
    public func getBuilder() -> GroupMessage.Builder {
        return classBuilder() as! GroupMessage.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
        return GroupMessage.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
        return GroupMessage.Builder()
    }
    public func toBuilder() throws -> GroupMessage.Builder {
        return try GroupMessage.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:GroupMessage) throws -> GroupMessage.Builder {
        return try GroupMessage.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
        try isInitialized()
        var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
        if hasUser {
            jsonMap["user"] = try user.encode()
        }
        if hasText {
            jsonMap["text"] = text
        }
        if hasGroupId {
            jsonMap["groupId"] = "\(groupId!)"
        }
        return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> GroupMessage {
        return try GroupMessage.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data, options: JSONSerialization.ReadingOptions = []) throws -> GroupMessage {
        return try GroupMessage.Builder.fromJSONToBuilder(data:data, options:options).build()
    }
    override public func getDescription(indent:String) throws -> String {
        var output = ""
        if hasUser {
            output += "\(indent) user {\n"
            if let outDescUser = user {
                output += try outDescUser.getDescription(indent: "\(indent)  ")
            }
            output += "\(indent) }\n"
        }
        if hasText {
            output += "\(indent) text: \(String(describing: text)) \n"
        }
        if hasGroupId {
            output += "\(indent) groupId: \(String(describing: groupId)) \n"
        }
        output += unknownFields.getDescription(indent: indent)
        return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasUser {
                if let hashValueuser = user?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueuser
                }
            }
            if hasText {
                hashCode = (hashCode &* 31) &+ text.hashValue
            }
            if hasGroupId {
                hashCode = (hashCode &* 31) &+ groupId.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "GroupMessage"
    }
    override public func className() -> String {
        return "GroupMessage"
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
        fileprivate var builderResult:GroupMessage = GroupMessage()
        public func getMessage() -> GroupMessage {
            return builderResult
        }

        required override public init () {
            super.init()
        }
        public var user:UserInfo! {
            get {
                if userBuilder_ != nil {
                    builderResult.user = userBuilder_.getMessage()
                }
                return builderResult.user
            }
            set (value) {
                builderResult.hasUser = value != nil
                builderResult.user = value
            }
        }
        public var hasUser:Bool {
            get {
                return builderResult.hasUser
            }
        }
        fileprivate var userBuilder_:UserInfo.Builder! {
            didSet {
                builderResult.hasUser = true
            }
        }
        public func getUserBuilder() -> UserInfo.Builder {
            if userBuilder_ == nil {
                userBuilder_ = UserInfo.Builder()
                builderResult.user = userBuilder_.getMessage()
                if user != nil {
                    try! userBuilder_.mergeFrom(other: user)
                }
            }
            return userBuilder_
        }
        @discardableResult
        public func setUser(_ value:UserInfo!) -> GroupMessage.Builder {
            self.user = value
            return self
        }
        @discardableResult
        public func mergeUser(value:UserInfo) throws -> GroupMessage.Builder {
            if builderResult.hasUser {
                builderResult.user = try UserInfo.builderWithPrototype(prototype:builderResult.user).mergeFrom(other: value).buildPartial()
            } else {
                builderResult.user = value
            }
            builderResult.hasUser = true
            return self
        }
        @discardableResult
        public func clearUser() -> GroupMessage.Builder {
            userBuilder_ = nil
            builderResult.hasUser = false
            builderResult.user = nil
            return self
        }
        public var text:String {
            get {
                return builderResult.text
            }
            set (value) {
                builderResult.hasText = true
                builderResult.text = value
            }
        }
        public var hasText:Bool {
            get {
                return builderResult.hasText
            }
        }
        @discardableResult
        public func setText(_ value:String) -> GroupMessage.Builder {
            self.text = value
            return self
        }
        @discardableResult
        public func clearText() -> GroupMessage.Builder{
            builderResult.hasText = false
            builderResult.text = nil
            return self
        }
        public var groupId:Int64 {
            get {
                return builderResult.groupId
            }
            set (value) {
                builderResult.hasGroupId = true
                builderResult.groupId = value
            }
        }
        public var hasGroupId:Bool {
            get {
                return builderResult.hasGroupId
            }
        }
        @discardableResult
        public func setGroupId(_ value:Int64) -> GroupMessage.Builder {
            self.groupId = value
            return self
        }
        @discardableResult
        public func clearGroupId() -> GroupMessage.Builder{
            builderResult.hasGroupId = false
            builderResult.groupId = nil
            return self
        }
        override public var internalGetResult:GeneratedMessage {
            get {
                return builderResult
            }
        }
        @discardableResult
        override public func clear() -> GroupMessage.Builder {
            builderResult = GroupMessage()
            return self
        }
        override public func clone() throws -> GroupMessage.Builder {
            return try GroupMessage.builderWithPrototype(prototype:builderResult)
        }
        override public func build() throws -> GroupMessage {
            try checkInitialized()
            return buildPartial()
        }
        public func buildPartial() -> GroupMessage {
            let returnMe:GroupMessage = builderResult
            return returnMe
        }
        @discardableResult
        public func mergeFrom(other:GroupMessage) throws -> GroupMessage.Builder {
            if other == GroupMessage() {
                return self
            }
            if (other.hasUser) {
                try mergeUser(value: other.user)
            }
            if other.hasText {
                text = other.text
            }
            if other.hasGroupId {
                groupId = other.groupId
            }
            try merge(unknownField: other.unknownFields)
            return self
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream) throws -> GroupMessage.Builder {
            return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> GroupMessage.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
            while (true) {
                let protobufTag = try codedInputStream.readTag()
                switch protobufTag {
                case 0: 
                    self.unknownFields = try unknownFieldsBuilder.build()
                    return self

                case 10:
                    let subBuilder:UserInfo.Builder = UserInfo.Builder()
                    if hasUser {
                        try subBuilder.mergeFrom(other: user)
                    }
                    try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                    user = subBuilder.buildPartial()

                case 18:
                    text = try codedInputStream.readString()

                case 24:
                    groupId = try codedInputStream.readInt64()

                default:
                    if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                        unknownFields = try unknownFieldsBuilder.build()
                        return self
                    }
                }
            }
        }
        class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> GroupMessage.Builder {
            let resultDecodedBuilder = GroupMessage.Builder()
            if let jsonValueUser = jsonMap["user"] as? Dictionary<String,Any> {
                resultDecodedBuilder.user = try UserInfo.Builder.decodeToBuilder(jsonMap:jsonValueUser).build()

            }
            if let jsonValueText = jsonMap["text"] as? String {
                resultDecodedBuilder.text = jsonValueText
            }
            if let jsonValueGroupId = jsonMap["groupId"] as? String {
                resultDecodedBuilder.groupId = Int64(jsonValueGroupId)!
            } else if let jsonValueGroupId = jsonMap["groupId"] as? Int {
                resultDecodedBuilder.groupId = Int64(jsonValueGroupId)
            }
            return resultDecodedBuilder
        }
        override class public func fromJSONToBuilder(data:Data, options: JSONSerialization.ReadingOptions = []) throws -> GroupMessage.Builder {
            let jsonData = try JSONSerialization.jsonObject(with:data, options: options)
            guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
              throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
            }
            return try GroupMessage.Builder.decodeToBuilder(jsonMap:jsDataCast)
        }
    }

}

extension UserInfo: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<UserInfo> {
        var mergedArray = Array<UserInfo>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> UserInfo? {
        return try UserInfo.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> UserInfo {
        return try UserInfo.Builder().mergeFrom(data: data, extensionRegistry:ImmessageRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> UserInfo {
        return try UserInfo.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> UserInfo {
        return try UserInfo.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> UserInfo {
        return try UserInfo.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> UserInfo {
        return try UserInfo.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> UserInfo {
        return try UserInfo.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "name": return self.name
        case "level": return self.level
        case "iconUrl": return self.iconUrl
        case "userId": return self.userId
        default: return nil
        }
    }
}
extension UserInfo.Builder: GeneratedMessageBuilderProtocol {
    public typealias GeneratedMessageType = UserInfo
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "name": return self.name
            case "level": return self.level
            case "iconUrl": return self.iconUrl
            case "userId": return self.userId
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "name":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.name = newSubscriptValue
            case "level":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.level = newSubscriptValue
            case "iconUrl":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.iconUrl = newSubscriptValue
            case "userId":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.userId = newSubscriptValue
            default: return
            }
        }
    }
}
extension TextMessage: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<TextMessage> {
        var mergedArray = Array<TextMessage>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> TextMessage? {
        return try TextMessage.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> TextMessage {
        return try TextMessage.Builder().mergeFrom(data: data, extensionRegistry:ImmessageRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> TextMessage {
        return try TextMessage.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> TextMessage {
        return try TextMessage.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> TextMessage {
        return try TextMessage.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> TextMessage {
        return try TextMessage.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> TextMessage {
        return try TextMessage.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "user": return self.user
        case "text": return self.text
        case "chatId": return self.chatId
        case "toUserId": return self.toUserId
        case "chatType": return self.chatType
        case "success": return self.success
        default: return nil
        }
    }
}
extension TextMessage.Builder: GeneratedMessageBuilderProtocol {
    public typealias GeneratedMessageType = TextMessage
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "user": return self.user
            case "text": return self.text
            case "chatId": return self.chatId
            case "toUserId": return self.toUserId
            case "chatType": return self.chatType
            case "success": return self.success
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "user":
                guard let newSubscriptValue = newSubscriptValue as? UserInfo else {
                    return
                }
                self.user = newSubscriptValue
            case "text":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.text = newSubscriptValue
            case "chatId":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.chatId = newSubscriptValue
            case "toUserId":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.toUserId = newSubscriptValue
            case "chatType":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.chatType = newSubscriptValue
            case "success":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.success = newSubscriptValue
            default: return
            }
        }
    }
}
extension GroupMessage: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<GroupMessage> {
        var mergedArray = Array<GroupMessage>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> GroupMessage? {
        return try GroupMessage.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> GroupMessage {
        return try GroupMessage.Builder().mergeFrom(data: data, extensionRegistry:ImmessageRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> GroupMessage {
        return try GroupMessage.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> GroupMessage {
        return try GroupMessage.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> GroupMessage {
        return try GroupMessage.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> GroupMessage {
        return try GroupMessage.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> GroupMessage {
        return try GroupMessage.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "user": return self.user
        case "text": return self.text
        case "groupId": return self.groupId
        default: return nil
        }
    }
}
extension GroupMessage.Builder: GeneratedMessageBuilderProtocol {
    public typealias GeneratedMessageType = GroupMessage
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "user": return self.user
            case "text": return self.text
            case "groupId": return self.groupId
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "user":
                guard let newSubscriptValue = newSubscriptValue as? UserInfo else {
                    return
                }
                self.user = newSubscriptValue
            case "text":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.text = newSubscriptValue
            case "groupId":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.groupId = newSubscriptValue
            default: return
            }
        }
    }
}

// @@protoc_insertion_point(global_scope)
